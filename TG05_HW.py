import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiohttp import ClientSession
from deep_translator import GoogleTranslator
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è HTTP-—Å–µ—Å—Å–∏–∏
session: ClientSession = None

# ==== –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ GoogleTranslator ====
def translate_to_russian(text: str) -> str:
    try:
        return GoogleTranslator(source="auto", target="ru").translate(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ."


# ==== /start ====
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "üí° /quote ‚Äî –¶–∏—Ç–∞—Ç–∞ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)\n"
        "üòÇ /joke ‚Äî –®—É—Ç–∫–∞ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)\n"
        "üê± /cat ‚Äî –§–æ—Ç–æ –∫–æ—Ç–∏–∫–∞\n"
        "üê∂ /dog ‚Äî –§–æ—Ç–æ —Å–æ–±–∞—á–∫–∏\n"
        "üî¢ /number [—á–∏—Å–ª–æ] ‚Äî –§–∞–∫—Ç –æ —á–∏—Å–ª–µ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)"
    )


# ==== /quote ====
@dp.message(Command("quote"))
async def get_quote(message: types.Message):
    url = "https://zenquotes.io/api/random"
    async with session.get(url) as response:
        if response.status == 200:
            data = await response.json()
            quote = f"{data[0]['q']}\n\n‚Äî {data[0]['a']}"
            translated = translate_to_russian(quote)
            await message.answer(f"üí¨ {translated}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É.")


# ==== /joke ====
@dp.message(Command("joke"))
async def get_joke(message: types.Message):
    url = "https://official-joke-api.appspot.com/random_joke"
    async with session.get(url) as response:
        if response.status == 200:
            data = await response.json()
            joke = f"{data['setup']}\n\n{data['punchline']}"
            translated = translate_to_russian(joke)
            await message.answer(f"üòÇ {translated}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É.")


# ==== /cat ====
@dp.message(Command("cat"))
async def get_cat(message: types.Message):
    url = "https://api.thecatapi.com/v1/images/search"
    async with session.get(url) as response:
        if response.status == 200:
            data = await response.json()
            await message.answer_photo(photo=data[0]['url'], caption="–í–æ—Ç –∫–æ—Ç–∏–∫ üê±")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏–∫–∞.")


# ==== /dog ====
@dp.message(Command("dog"))
async def get_dog(message: types.Message):
    url = "https://dog.ceo/api/breeds/image/random"
    async with session.get(url) as response:
        if response.status == 200:
            data = await response.json()
            await message.answer_photo(photo=data['message'], caption="–í–æ—Ç —Å–æ–±–∞—á–∫–∞ üê∂")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±–∞—á–∫—É.")


# ==== /number (—Ñ–∞–∫—Ç –æ —á–∏—Å–ª–µ + –ø–µ—Ä–µ–≤–æ–¥) ====
@dp.message(Command("number"))
async def get_number_fact(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2 or not args[1].isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: /number 42")
        return

    number = args[1]
    url = f"http://numbersapi.com/{number}"
    async with session.get(url) as response:
        if response.status == 200:
            fact = await response.text()
            translated = translate_to_russian(fact)
            await message.answer(f"üî¢ {translated}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç –æ —á–∏—Å–ª–µ.")


# ==== Startup & Shutdown –¥–ª—è —Å–µ—Å—Å–∏–∏ ====
@dp.startup()
async def on_startup():
    global session
    session = ClientSession()
    logging.info("HTTP-—Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞!")


@dp.shutdown()
async def on_shutdown():
    await session.close()
    logging.info("HTTP-—Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞!")


# ==== –ó–∞–ø—É—Å–∫ ====
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
