import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import sqlite3
import aiohttp
import logging
import os
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TOKEN")
RAPIDAPI_KEY = os.getenv("RAPIDAPI_KEY")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    ],
)


class Form(StatesGroup):
    name = State()
    age = State()
    city = State()


def init_db():
    with sqlite3.connect("user_data.db") as conn:
        cur = conn.cursor()
        cur.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            age INTEGER NOT NULL,
            city TEXT NOT NULL
        )
        ''')
        conn.commit()


init_db()


@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(Form.name)


@dp.message(Form.name)
async def name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(f"–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(Form.age)


@dp.message(Form.age)
async def age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 25")
        return

    age_value = int(message.text)
    if not (1 <= age_value <= 120):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–∞
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 1 –¥–æ 120 –ª–µ—Ç).")
        return

    await state.update_data(age=age_value)
    await message.answer(f"–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∂–∏–≤–µÃà—à—å?")
    await state.set_state(Form.city)


async def save_user_to_db(user_data, message: Message):
    try:
        with sqlite3.connect("user_data.db") as conn:
            cur = conn.cursor()
            cur.execute(
                "INSERT INTO users (name, age, city) VALUES (?, ?, ?)",
                (user_data["name"], user_data["age"], user_data["city"]),
            )
            conn.commit()
    except sqlite3.DatabaseError as e:  # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –ë–î
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(Form.city)
async def city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    user_data = await state.get_data()

    await save_user_to_db(user_data, message)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î

    url = "https://weatherapi-com.p.rapidapi.com/current.json"
    headers = {
        "X-RapidAPI-Key": RAPIDAPI_KEY,
        "X-RapidAPI-Host": "weatherapi-com.p.rapidapi.com"
    }
    params = {
        "q": user_data['city'],
        "lang": "ru"  # –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    }

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, headers=headers, params=params) as response:
                data = await response.json()

                if response.status != 200 or "error" in data:
                    logging.error(f"–û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {response.status}, –æ—Ç–≤–µ—Ç: {data}")
                    await message.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                    return

                country = data.get("location", {}).get("country", "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                city = data.get("location", {}).get("name", "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                temp = data.get("current", {}).get("temp_c", "‚ùì N/A")
                feels_like = data.get("current", {}).get("feelslike_c", "‚ùì N/A")
                condition = data.get("current", {}).get("condition", {}).get("text", "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                humidity = data.get("current", {}).get("humidity", "‚ùì N/A")
                wind_speed = data.get("current", {}).get("wind_kph", "‚ùì N/A")
                gust_speed = data.get("current", {}).get("gust_kph", "‚ùì N/A")

                weather_message = (
                    f"üåç <b>–°—Ç—Ä–∞–Ω–∞:</b> {country}\n"
                    f"üèô <b>–ì–æ—Ä–æ–¥:</b> {city}\n"
                    f"üå° <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {temp}¬∞C\n"
                    f"ü§î <b>–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:</b> {feels_like}¬∞C\n"
                    f"‚õÖ <b>–ü–æ–≥–æ–¥–∞:</b> {condition}\n"
                    f"üíß <b>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> {humidity}%\n"
                    f"üí® <b>–í–µ—Ç–µ—Ä:</b> {wind_speed} –∫–º/—á\n"
                    f"üå¨ <b>–ü–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞:</b> {gust_speed} –∫–º/—á"
                )

                await message.answer(weather_message, parse_mode="HTML")
                await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ

        except aiohttp.ClientError as e:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
            logging.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            await message.answer("‚ö† –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        except Exception as e:  # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, JSONDecodeError)
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö API: {e}")
            await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.")


async def main():
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}", exc_info=True)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π stack trace


if __name__ == "__main__":
    asyncio.run(main())
